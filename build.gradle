// Establish version and status
ext.githubProjectName = rootProject.name // Change if github project name is not the same as the root project's name
group = "com.netflix.${githubProjectName}"

buildscript {
    repositories {
        mavenLocal()
        mavenCentral() // maven { url 'http://jcenter.bintray.com' }
    }
    apply from: file('gradle/buildscript.gradle'), to: buildscript
}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral() // maven { url: 'http://jcenter.bintray.com' }
    }
}

apply plugin: 'groovy'

apply from: file('gradle/convention.gradle')
apply from: file('gradle/maven.gradle')
apply from: file('gradle/check.gradle')
apply from: file('gradle/license.gradle')
apply from: file('gradle/release.gradle')

// Added separate integration tests
// Borrowed technique from http://selimober.com/blog/2014/01/24/separate-unit-and-integration-tests-using-gradle/

// Test Structure
sourceSets {
    integTest {
        java.srcDir file('src/integTest/java')
        groovy.srcDir file('src/integTest/groovy')
        resources.srcDir file('src/integTest/resources')
    }
}

task integTest(type: Test) {
    testClassesDir = sourceSets.integTest.output.classesDir
    classpath = sourceSets.integTest.runtimeClasspath
}

check.dependsOn integTest

dependencies {
	compile 'org.codehaus.groovy:groovy-all:2.0.8'
	compile 'com.amazonaws:aws-java-sdk:1.6.6'
	compile 'com.google.guava:guava:12.0'
	compile 'com.googlecode.json-simple:json-simple:1.1'

	testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'
	testCompile 'cglib:cglib-nodep:2.2.2'

    integTestCompile sourceSets.main.output
    integTestCompile configurations.testCompile
    integTestCompile sourceSets.test.output
    integTestRuntime configurations.testRuntime
}